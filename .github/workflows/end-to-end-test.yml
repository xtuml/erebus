name: End-to-End Test

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      'main'

jobs:
  build-and-test:
    if: |
        github.repository == 'xtuml/erebus'
            && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up environment
        run: sudo apt-get install -y libxml2-utils

      - name: Run tests
        run: |
          git clone https://github.com/xtuml/munin.git

          cd munin
          git checkout tags/1.3.1-midstage3

          # Copy over necessary files to get tests to pass
          cd ..
          cp ./end_to_end_test_files/log-pv-files.properties ./munin/deploy/config/log-pv-files.properties
          cp ./end_to_end_test_files/log-pv-kafka.properties ./munin/deploy/config/log-pv-kafka.properties
          cp ./end_to_end_test_files/docker-compose.prod.yml ./munin/deploy/docker-compose.prod.yml

          docker compose -f ./munin/deploy/docker-compose.prod.yml up -d

          # copy over config file that allows docker containers to work within Github Actions
          mkdir -p config
          cp ./end_to_end_test_files/config.config ./config/config.config

          # Start the test harness
          docker compose -f ./docker-compose-end-to-end-test.yml up -d

          sleep 10
          echo "Testing that no tests are running"
          curl 127.0.0.1:8800/isTestRunning | grep 'false'

          # actual tests are set to run
          echo "Running a performance test"
          timeout 1m ./scripts/end-to-end-curl-commands.sh

          # this should return true as tests are running
          echo "Testing that tests are running"
          curl 127.0.0.1:8800/isTestRunning | grep 'true'

          # It takes this long to get any meaningful output from the test harness
          # It's 60 seconds for the test harness to start the job ...
          # ... and 10 seconds to run the job ...
          # ... and 60 seconds to ensure the test is finished ...
          # ... and another 50 seconds for grace time in starting up/waiting for logs/waiting for calculations
          echo "Sleeping to give the test harness time to work"
          date
          sleep 120
          date
          curl 127.0.0.1:8800/isTestRunning | grep 'false'

          docker compose -f ./docker-compose-end-to-end-test.yml logs test-harness | grep -Po "Test Harness test run completed successfully"

          # Inspect report output for failures of performance test
          xmllint --xpath 'string(//testsuites/@failures)' /test_harness_app/test_harness/report_output/performance_test/Results.xml

          docker compose -f ./munin/deploy/docker-compose.prod.yml down
          docker compose -f ./docker-compose-end-to-end-test.yml down
